import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'

import {
  ApolloClient,
  InMemoryCache,
  gql,
  createHttpLink

} from "@apollo/client";
import { setContext } from '@apollo/client/link/context';

export default function Home({ pinnedItems }) {
  console.log(pinnedItems)
  return (
    <div>
      <Head>
        <title>xdaTq - Portfolio</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/logo.ico" />
      </Head>

      <nav className={styles.navigation}>
        <ul className={styles.ulist}>
          <li>
            <a className={styles.navigationText} href="#home">
              <p>Home</p>
            </a>
          </li>
          <li>
            <a className={styles.navigationText} href="#news">
              <p>Blog</p>
            </a>
          </li>
          <li>
            <a className={styles.navigationText} href="#contact">
              <p>News</p>
            </a>
          </li>
          <li>
            <a className={styles.navigationText} href="#about">
              <p>About</p>
            </a>
          </li>
        </ul>
      </nav>

      <main id='home' className={styles.main}>

        <div className={styles.spacing}>
          <div className={`${styles.typewriter} ${styles.welcomeText}`}>
            <h1>
              <span className={styles.welcome}>Welcome</span>
              <span>,</span>
              <span>to my Portfolio.</span>
            </h1>
            <p>My name is Erwin <br></br> and you just found my personal space on the internet.</p>
          </div>
        </div>

        <hr />

        <h1 className={styles.title}> My github projects </h1>

        <div className={styles.gridGithub}>

          {pinnedItems.map(item => {
            return (
              <a key={item.id} href={item.url} className={styles.cardGithub}>
                <h2> {item.name} &rarr;</h2>
                <p>{item.description}</p>
                <p>‚≠ê{item.stargazer}</p>
              </a>
            )
          })}

        </div>
        
        <hr />

        <h1> My About page </h1>

        <div id='about' className={styles.gridAbout}>

          <div className={styles.cardAbout}>
            <h2>About me</h2>
            <p>Discover and deploy boilerplate example Next.js projects. awdawawdawawwadawawdaw wadawdaw dawdawdawdawda wdadawdawd. awdawd adaw dad.</p>
          </div>

          <div className={styles.cardAbout}>
            <h2>About my intrests</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </div>

          <div className={styles.cardAbout}>
            <h2>About my blog</h2>
            <p>Discover and deploy boilerplate example Next.js projects. </p>
          </div>

        </div>

        <h3>Here are my favotie spotify playlists</h3>

      </main >
      

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.powered}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>

        <a
          href="https://github.com/xdaTq"
          target="_blank"
          rel="noopener noreferrer"
        >
          Designed by{' '}
          <span className={styles.designed}>
            <article>xdaTq - https://github.com/xdaTq</article>
          </span>
        </a>
      </footer>
    </div >
  )
}

export async function getStaticProps() {
  const httpLink = createHttpLink({
    uri: 'https://api.github.com/graphql',
  });
  
  const authLink = setContext((_, { headers }) => {
    return {
      headers: {
        ...headers,
        authorization: `Bearer ${process.env.github_token}`,
      }
    }
  });
  
  const client = new ApolloClient({
    link: authLink.concat(httpLink),
    cache: new InMemoryCache()
  });

  const { data } = await client.query({
    query: gql`
      {
        viewer {
          login
        }
        user(login: "xdaTq") {
          pinnedItems(first: 6) {
            totalCount
            edges {
              node {
                ... on Repository {
                  id
                  name
                  stargazers {
                    totalCount
                  }
                  description
                }
              }
            }
          }
        }
      }
    `
  })

  const { user } = data;
  const pinnedItems = user.pinnedItems.edges.map(({ node }) => node);

  return {
    props: {
      pinnedItems
    }
  }
}
